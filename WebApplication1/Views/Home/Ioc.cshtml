@inject WebApplication1.Services.Hash.IHashService hashService
@{
    ViewData["Title"] = "Ioc";
}

<div class="page-title">
    <img src="/img/asp.net.png" alt="ASP logo">
    <h1 class="display-4">Інверсія управління (Ioc)</h1>
</div>
<p>
    Інверсія управління - це схема (патерн) проєктування згідно з яким управління життєвим циклом об'єктів перекладається
    на окремий архітектурний елемент - інжектор або контейнер служб
</p>
<p>
    Замість традиційної схеми, за якої кожен об'єкт сам створює всі необхідні для своєї робти залежєності (інші об'єкти), 
    у схеми Ioc об'єкти "запитують" у контейнера необхідні елементи - інжектує їх.
</p>
<ul>
    <li>Створюємо місце для служб - папку Services</li>
    <li>За принципом DIP служби слід впроваджувати через інтерфейси, відповідно одна служба - це щонеайменше два файли,
        для кожної служби також бажано створювати папки (Hash).
    </li>
    <li>Створюємо інтерфейс для служби IHashService</li>
    <li>Створюємо клас - імплементацію інтерфейсу (Md5HashService)</li>
    <li>Реєструємо службу у Program.cs (див коментарі там)</li>
    <li>інжектуємо службу у контролері (див коментарі там)</li>
</ul>
<ul>
    <li>Створюємо ще один клас - ShaHashService</li>
    <li>Замінюємо клас в інтсрукції реєстрації сервісу (Program.cs)</li>
</ul>
<p>
    hash (from controller) = @ViewData["hash"]<br/>
    hash (from view)= @(hashService.Digest("123"))<br/>
    hashCode (from controller) = @ViewData["hashCode"]<br />
    hashCode (from view) = @hashService.GetHashCode()<br />
</p>
<h2>Часи існування служб (Service Scopes)</h2>
<p>
    Деякі об'єкти-служби нормально себе поводять якщо створюються тільки один раз, наприклад, служба хешування,
    генератор випадкових чисел. Інші об'єкти можуть вимагати перестворення з новими запитами, наприклад, служби,
    пов'язані з доступом користувачів (новий запит новий користувач нова служба). Деякі об'єкти взагалі одноразові,
    тобто не передбачають повторне використання.
    Ці часові області "життя" об'єктів і називають Service Scopes. А до задач ІоС (інверсії управління) 
    належить також управління життєвим циклом служб.
</p>
<p>
    Розрізняється декілька способів реєстрації служб: <br />
    <code>AddSingleton</code> - об'єкт залишається незмінним максимально довго, не змінюється навіть при оновленні сторінки. <br />
    <code>AddScoped</code> - об'єкт залишається незмінним протягом одного запиту (Request), при оновленні сторінки змінюється<br />
    <code>AddTransient</code> - об'єкт змінюється при кожному зверненні усі запити інжекції одержать різні об'єкти.
</p>



        Д.З Створити сервіс генерації випадкових паролів (OTP - one time password):
        числових послідовностей з 6 цифр, що подаються у вигляді рядку (String)
        - інтерфейс 
        -імплементація
        - реєстрація
        - інжекція
        - виведення на сторінці
        Створити другий сервіс, що генерує 4-цифрові OTP; перевести проєкт на  роботу з новим сервісом



   Д.З. Створити сервіс генерації випадкових імен файлів:
довжина імені задається параметром
в імені лише малі символи без заборонених файловою системою (/\*?...)
Зареєструвати сервіс, випробувати його на довільній сторінці