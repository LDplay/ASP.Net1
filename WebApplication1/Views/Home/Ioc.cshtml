@{
    ViewData["Title"] = "Ioc";
}

<div class="page-title">
    <img src="/img/asp.net.png" alt="ASP logo">
    <h1 class="display-4">Інверсія управління (Ioc)</h1>
</div>
<p>
    Інверсія управління - це схема (патерн) проєктування згідно з яким управління життєвим циклом об'єктів перекладається
    на окремий архітектурний елемент - інжектор або контейнер служб
</p>
<p>
    Замість традиційної схеми, за якої кожен об'єкт сам створює всі необхідні для своєї робти залежєності (інші об'єкти), 
    у схеми Ioc об'єкти "запитують" у контейнера необхідні елементи - інжектує їх.
</p>
<ul>
    <li>Створюємо місце для служб - папку Services</li>
    <li>За принципом DIP служби слід впроваджувати через інтерфейси, відповідно одна служба - це щонеайменше два файли,
        для кожної служби також бажано створювати папки (Hash).
    </li>
    <li>Створюємо інтерфейс для служби IHashService</li>
    <li>Створюємо клас - імплементацію інтерфейсу (Md5HashService)</li>
    <li>Реєструємо службу у Program.cs (див коментарі там)</li>
    <li>інжектуємо службу у контролері (див коментарі там)</li>
</ul>
<ul>
    <li>Створюємо ще один клас - ShaHashService</li>
    <li>Замінюємо клас в інтсрукції реєстрації сервісу (Program.cs)</li>
</ul>
<p>
    hash = @ViewData["hash"]
</p>



        Д.З Створити сервіс генерації випадкових паролів (OTP - one time password):
        числових послідовностей з 6 цифр, що подаються у вигляді рядку (String)
        - інтерфейс 
        -імплементація
        - реєстрація
        - інжекція
        - виведення на сторінці
        Створити другий сервіс, що генерує 4-цифрові OTP; перевести проєкт на  роботу з новим сервісом